import argparse
import logging
from dataclasses import dataclass
from datetime import datetime

import backoff
import requests
import telegram
from environs import Env
from telegram.constants import PARSEMODE_HTML

BACKOFF_EXP_EXCEPTIONS = (requests.ConnectionError, requests.ConnectTimeout,
                          requests.HTTPError)


@dataclass
class PollingConf:
    bot: telegram.Bot
    chat_id: int
    headers: dict
    url: str = 'https://dvmn.org/api/long_polling/'
    # Timestamp, –Ω–∞—á–∏–Ω–∞—è —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –ø–æ–¥—Ç—è–≥–∏–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–∞—Ö.
    # –•—Ä–∞–Ω–∏—Ç—Å—è –≤ –∫–æ–Ω—Ñ–∏–≥–µ, —á—Ç–æ–±—ã —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ —Ç–µ—Ä—è–ª–æ—Å—å –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –ø–æ–ª–ª–∏–Ω–≥-—Ñ—É–Ω–∫—Ü–∏–∏
    # –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–æ–∫.
    timestamp: float = datetime.now().timestamp()
    timeout: int = 120


def main():
    env = Env()
    env.read_env()
    token = env.str('DEVMAN_API_TOKEN')
    tg_bot_token = env.str('TG_BOT_API_TOKEN')

    parser = argparse.ArgumentParser(
        prog='Send Devman lessons status to Telegram.')
    parser.add_argument('chat_id', type=int,
                        help="Telegram Chat ID (a 9-digit number).")
    args = parser.parse_args()
    tg_chat_id = args.chat_id

    logging.basicConfig(
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        level=logging.ERROR
    )
    logging.getLogger('backoff').addHandler(logging.StreamHandler())
    logging.getLogger('backoff').setLevel(logging.ERROR)

    conf = PollingConf(
        bot=telegram.Bot(token=tg_bot_token),
        chat_id=tg_chat_id,
        headers={'Authorization': f'Token {token}'},
        timeout=120,
    )
    start_polling(conf)


# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –æ—à–∏–±–æ–∫ (https://github.com/litl/backoff):
# - –ü—Ä–∏ `ReadTimeout` –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç —á–µ—Ä–µ–∑ —Ä–∞–Ω–¥–æ–º–Ω–æ–µ –≤—Ä–µ–º—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 1 —Å–µ–∫.
# - –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö –∏–∑ `BACKOFF_EXP_EXCEPTIONS` —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ
#   —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø—Ä–∏ –∫–∞–∂–¥–æ–π –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –Ω–µ—É–¥–∞—á–µ –¥–æ —Ç–µ—Ö –ø–æ—Ä,
#   –ø–æ–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –Ω–µ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç—Å—è.
# - –ü—Ä–∏ `KeyError` (–æ—Ç–≤–µ—Ç –ø—Ä–∏—à—ë–ª –±–µ–∑ –Ω—É–∂–Ω—ã—Ö –ø–æ–ª–µ–π) —Ç–∞–∫–∂–µ –Ω–∞—á–Ω—É—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∏ –ø–æ
#   —ç–∫—Å–ø–æ–Ω–µ–Ω—Ç–µ, –Ω–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ —Ç–æ–ª—å–∫–æ `max_tries` –ø–æ–ø—ã—Ç–æ–∫.
@backoff.on_exception(backoff.constant, requests.ReadTimeout, interval=0, logger=None)
@backoff.on_exception(backoff.expo, BACKOFF_EXP_EXCEPTIONS)
@backoff.on_exception(backoff.expo, KeyError, max_tries=20)
def start_polling(conf: PollingConf):
    while True:
        resp = requests.get(
            conf.url,
            headers=conf.headers,
            # Timestamp —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤—Å–µ–≥–¥–∞, —á—Ç–æ–±—ã –≤ —Å–ª—É—á–∞–µ —Å–±–æ–µ–≤ —Å–µ—Ç–∏ —Å –ø–æ—Å–ª–µ–¥—É—é—â–µ–π
            # –∑–∞–¥–µ—Ä–∂–∫–æ–π –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã—Ö –æ–ø–æ–≤–µ—â–µ–Ω–∏–π.
            params={'timestamp': conf.timestamp},
            timeout=conf.timeout
        )
        resp.raise_for_status()
        reviews = resp.json()

        if reviews['status'] == 'found':
            attempts = reviews['new_attempts']

            for attempt in attempts:
                is_approved = not attempt['is_negative']
                title = attempt['lesson_title']
                lesson_url = attempt['lesson_url']

                msg = ''
                if is_approved:
                    msg = f'‚úÖ –£—Ä–æ–∫ ¬´<a href="{lesson_url}">{title}</a>¬ª –ø—Ä–∏–Ω—è—Ç!'
                else:
                    msg = f'üõ† –ü–æ —É—Ä–æ–∫—É ¬´<a href="{lesson_url}">{title}</a>¬ª –µ—Å—Ç—å –∑–∞–º–µ—á–∞–Ω–∏—è.'

                conf.bot.send_message(
                    chat_id=conf.chat_id,
                    text=msg, parse_mode=PARSEMODE_HTML,
                    disable_web_page_preview=True,
                )

            conf.timestamp = datetime.now().timestamp()
            continue

        if reviews['status'] == 'timeout':
            conf.timestamp = reviews['timestamp_to_request']
            continue


if __name__ == '__main__':
    main()
